var express = require('express');
var router = express.Router();
var controllers = require('.././controllers');
var passport = require('passport');
var AuthMiddleware= require('.././middleware/auth');// para rutas que necesitan autenticacion

router.get('/', controllers.HomeController.cerrarSesion); //si volvemos a la pagina principal cerramos sesion automaticamente,
                                                          //para poder realizar otros ejercicios de autenticacion

//formulario de loggin sin filtro, ejercicio 1 de SQLi (con sesion)
router.get('/auth/signin', controllers.UserController.getSignIn);
router.post('/auth/signin', passport.authenticate('local', {
  successRedirect: '/auth/ejercicio1', // redireccion en caso de exito al autenticarse
  failureRedirect: '/auth/signin', // redireccion si falla la autenticacion
  failureFlash: true
}));
// exito en la autenticacion del primer ejercicio, con sesion
router.get('/auth/ejercicio1', controllers.HomeController.infoAutenticacion);

//formulario de loggin, ejercicio 2 y 3 de SQLi (comienzo de password por letra)
router.get('/auth/signin2', controllers.UserController.getSignIn2);
router.post('/auth/signin2', controllers.UserController.postSignIn2);

//formulario de loggin, ejercicio de fuerza bruta (solo letras o numeros)
router.get('/auth/signin3', controllers.UserController.getSignIn3);
router.post('/auth/signin3', controllers.UserController.postSignIn3);

//formulario de loggin, ejercicio de reDoS (solo letras o numeros)
router.get('/auth/reDoS', controllers.UserController.getReDoS);
router.post('/auth/reDoS', controllers.UserController.postReDoS);

//formulario de loggin, ejercicio de autenticación insuficiente
router.get('/auth/signin4', controllers.UserController.getSignIn4);

// controlador para cerrar sesion
router.get('/auth/logout', controllers.UserController.logout);

// ejemplos de autenticacion insuficiente
router.get('/users/perfil', controllers.UserController.getUserPanel);
//Esta direccion también cumple con una funcion de registro para MySQL
router.get('/auth/signup', controllers.UserController.getSignUp);
router.post('/auth/signup', controllers.UserController.postSignUp);

// Middleware para la defensa contra autenticación insuficiente
//router.get('/users/perfil', AuthMiddleware.isLogged, controllers.UserController.getUserPanel);

//Busqueda de peliculas, ejercicio de NoSQLi con MongoDB
router.get('/movies/search', controllers.FilmControllerMongo.getSearch);
router.post('/movies/search', controllers.FilmControllerMongo.postSearch);
//Panel de comentarios, ejercicio 1 de xss (sin filtro)
router.get('/movies/:movie', controllers.FilmControllerMongo.getDetails);
router.post('/movies/:movie', controllers.FilmControllerMongo.postDetails);
//Panel de comentarios, ejercicio 2 de xss (filtrando la primera ocurrencia de <script>)
router.get('/comentarios/Origen1', controllers.FilmControllerMongo.getDetails1);
router.post('/comentarios/Origen1', controllers.FilmControllerMongo.postDetails1);
//Panel de comentarios, ejercicio 3 (se sustituye todas las ocurrencias de <script> y no es sensible a mayusculas)
router.get('/comentarios/Origen2', controllers.FilmControllerMongo.getDetails2);
router.post('/comentarios/Origen2', controllers.FilmControllerMongo.postDetails2);
//Panel de comentarios, ejercicio 4 de xss (reemplazo de (") y de (<), mirar controlador para mas detalles)
router.get('/comentarios/Origen3', controllers.FilmControllerMongo.getDetails3);
router.post('/comentarios/Origen3', controllers.FilmControllerMongo.postDetails3);

//Calculadora, ejercicios de función eval()
router.get('/calculadora1', controllers.calculadora.getResultFront);
router.get('/calculadora2', controllers.calculadora.getResultBack);
router.post('/calculadora2', controllers.calculadora.postResultBack);


module.exports = router;
