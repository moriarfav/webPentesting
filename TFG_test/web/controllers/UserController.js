var bcrypt = require('bcryptjs');
var modelUser = require('.././models/user');
var contador= 0;

module.exports = {
  
  getSignUp: function(req, res, next){
    return res.render('users/signup',{message1: req.flash('existe'), vacio: req.flash('vacio')});
  },
  postSignUp: function(req, res, next){

      // encriptado de password
    
      var salt=bcrypt.genSaltSync(10) ;
      var password = bcrypt.hashSync(req.body.password, salt);
      
      // se recupera el usuario y contraseña introducidos en la vista por el usuario
      var usuario = req.body.usuario;
      //var password = req.body.password;
      if ((usuario == '') || (password == '')) {
            req.flash('vacio', 'Es necesario rellenar ambos campos');
            return res.redirect('/auth/signup');
        }
      // se llama a un metodo del modelo para consultar si ya existe ese nombre
       modelUser.getName(usuario,function(err,rows){
            if (rows.length > 0) {
                req.flash('existe', 'El nombre de usuario ya existe');
                return res.redirect('/auth/signup');

            } else {
                var user = {         
                    usuario: usuario,
                    //encriptada
                    password: password                  
                };
                //se llama a un metodo del modelo que inserta el usuario en la tabla
                modelUser.insertUser(user);
                
                req.flash('info', 'Se ha registrado correctamente');
                return res.redirect('/auth/signin');
            }     
      });

        


  },
  getSignIn: function(req, res, next){
    return res.render('users/signin', {message: req.flash('info'), authmessage: req.flash('authmessage'),  filtro: req.flash('filtro')});
  },
  // el post esta en passport/passport.js
  getSignIn2: function(req, res, next){
    return res.render('users/signin2', {authmessage: req.flash('authmessage'),  filtro: req.flash('filtro')});
  },
  postSignIn2: function(req, res, next){ 

          // se recupera el usuario y contraseña introducidos en la vista por el usuario
          var usuario = req.body.usuario;
          var password = req.body.password;

          // filtro: Primer caracter debe ser una letra          
          if(!password.match(/^[a-zA-Z]+/)||!usuario.match(/^[a-zA-Z]+/)){
              req.flash('filtro', 'Caracteres Incorrectos');
              return res.redirect('/auth/signin2');
          }
          // se llama a un metodo del modelo para consultar por el usuario
            modelUser.getUser(usuario,password,function(err,rows){
              if(err){
                req.flash('filtro', 'consultar error en la consola');
                return res.redirect('/auth/signin2');
              }
              if(rows.length > 0){ // si la consulta dio algun resultado
                var user = rows[0];

                    // solo es necesario el nombre de usuario, por tanto se envia sin el password
                    return res.render('users/exito2', {user: user.usuario}); 
                
              }
              req.flash('authmessage', 'Nombre de usuario y/o contraseña incorrecto/s');
              return res.redirect('/auth/signin2');  

            });
                     
  },
  getSignIn3: function(req, res, next){
    return res.render('users/signin3', {authmessage: req.flash('authmessage'),  filtro: req.flash('filtro')});
  },
  postSignIn3: function(req, res, next){


          // se recupera el usuario y contraseña introducidos en la vista por el usuario
          var usuario = req.body.usuario;
          var password = req.body.password;

          /*Defensa que limita el numero de intentos
          contador= contador+1;
          if(contador>=4){
            req.flash('filtro', 'numero de intentos superado');
            return res.redirect('/auth/signin3');
          }
           */

          // filtro: Solo permite letras y numeros
          if(!password.match(/^[0-9a-zA-Z]+$/)||!usuario.match(/^[0-9a-zA-Z]+$/)){
            req.flash('filtro', 'Caracteres Incorrectos');
            return res.redirect('/auth/signin3');
          } // no inyectable, para fuerza bruta
          modelUser.getName(usuario,function(err,rows){
              if(rows.length > 0){ // si la consulta dio algun resultado
                var user = rows[0];
                if(bcrypt.compareSync(password, user.password)){ // si las contraseñas coinciden               
                    return res.render('users/exito3', {user: user.usuario}); 
 
                }
              }
              
              req.flash('authmessage', 'Nombre de usuario y/o contraseña incorrecto/s');
              return res.render('users/signin3', {authmessage: req.flash('authmessage'),  filtro: req.flash('filtro')});

            });
  },
  getReDoS: function(req, res, next){
    return res.render('users/reDoS', {authmessage: req.flash('authmessage'),  filtro: req.flash('filtro')});
  },
  postReDoS: function(req, res, next){


          // se recupera el usuario y contraseña introducidos en la vista por el usuario
          var usuario = req.body.usuario;
          var password = req.body.password;

          // filtro que solo permite letras y numeros
           if(!password.match(/^([0-9a-zA-Z]+)*$/)||!usuario.match(/^([0-9a-zA-Z]+)*$/)){ // vulnerable a reDOS
            req.flash('filtro', 'Caracteres Incorrectos');
            return res.redirect('/auth/reDoS');
          } // no inyectable para ataques reDoS
          modelUser.getName(usuario,function(err,rows){
              if(rows.length > 0){ // si la consulta dio algun resultado
                var user = rows[0];
                if(bcrypt.compareSync(password, user.password)){ // si las contraseñas coinciden
                    return res.render('users/exito', {user: user.usuario}); 
 
                }
              }
              
              req.flash('authmessage', 'Nombre de usuario y/o contraseña incorrecto/s');
              return res.render('users/reDoS', {authmessage: req.flash('authmessage'),  filtro: req.flash('filtro')});

            });
  },
  getSignIn4: function(req, res, next){
    return res.render('users/signin4');
  },
  logout: function(req, res, next){
      req.logout();
      res.redirect('/auth/signin');
  },
  getUserPanel: function(req, res, next){
    res.render('users/perfil', {
    isAuthenticated: req.isAuthenticated(),
    user: req.user.usuario
    });
  }

};
